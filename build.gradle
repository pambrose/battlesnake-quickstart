plugins {
  id 'java'
  id 'maven-publish'
  id 'org.jetbrains.kotlin.jvm' version '1.6.20-M1'
  id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.20-M1'
  id "com.github.ben-manes.versions" version "0.42.0"
}

repositories {
  mavenLocal()
  google()
  mavenCentral()
}

sourceCompatibility = 1.8

description = 'battlesnake-quickstart'
group = 'io.battlesnake'
version = '0.14.0'

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"

  implementation "io.ktor:ktor-server:$ktor_version"
  implementation "io.ktor:ktor-server-cio:$ktor_version"
  implementation "io.ktor:ktor-server-html-builder:$ktor_version"
  implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"

  testImplementation "io.ktor:ktor-server-tests:$ktor_version"

  implementation "io.github.microutils:kotlin-logging:$logging_version"
  implementation "ch.qos.logback:logback-classic:$logback_version"
  implementation "org.slf4j:jul-to-slf4j:$slf4j_version"

  testImplementation "org.amshove.kluent:kluent:$kluent_version"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
  testImplementation "org.jetbrains.kotlin:kotlin-test:$test_version"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

// gradle 7
publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
    }
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
}

java {
  withSourcesJar()
}

compileKotlin {
  kotlinOptions {
    jvmTarget = '1.8'
    freeCompilerArgs += ['-opt-in=kotlin.time.ExperimentalTime',
                         '-opt-in=kotlin.ExperimentalStdlibApi']
  }
}

compileTestKotlin {
  kotlinOptions {
    jvmTarget = '1.8'
    freeCompilerArgs += ['-opt-in=kotlin.time.ExperimentalTime',
                         '-opt-in=kotlin.ExperimentalStdlibApi']
  }
}

test {
  useJUnitPlatform()

  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    exceptionFormat "full"
    showStandardStreams = true
  }
}